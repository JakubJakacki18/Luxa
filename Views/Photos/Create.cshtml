@model Luxa.Models.Photo

@{
	ViewData["Title"] = "Create";
}
<style>

	.input-container {
		display: flex;
		flex-wrap: wrap;
		border: 1px solid #ccc;
		padding: 5px;
		width: 300px;
	}

	.input-blocks {
		display: flex;
		flex-wrap: wrap;
		gap: 5px;
	}

	.input-field {
		border: none;
		outline: none;
		flex: 1;
		min-width: 100px;
		margin: 5px 0;
	}

	.input-block {
		background-color: #e0e0e0;
		border-radius: 5px;
		padding: 5px 10px;
		display: flex;
		align-items: center;
	}

	.input-block span {
			margin-right: 10px;
		}

		.input-block .remove-block {
			cursor: pointer;
			background: none;
			border: none;
			font-size: 16px;
			line-height: 1;
		}
</style>
<h1>Create</h1>

<h4>Photo</h4>
<hr />
<div class="row">
	<div class="col-md-4">
		<form asp-action="Create" enctype="multipart/form-data">
			<div asp-validation-summary="ModelOnly" class="text-danger"></div>

			<div class="form-group">
				<label asp-for="Name" class="control-label"></label>
				<input asp-for="Name" class="form-control" />
				<span asp-validation-for="Name" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="Description" class="control-label"></label>
				<input asp-for="Description" class="form-control" />
				<span asp-validation-for="Description" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="ImageFile" class="control-label"></label>
				<input asp-for="ImageFile" accept="image/*" />
				<span asp-validation-for="ImageFile" class="text-danger"></span>
			</div>

			<div class="input-container">
				<div id="input-blocks" class="input-blocks"></div>
				<input id="input-field" type="text" class="input-field" placeholder="Type and press space" />
			</div>



			<div class="form-group">
				<input type="submit" value="Create" class="btn btn-primary" />
			</div>
		</form>
	</div>
</div>

<div>
	<a asp-action="Index">Back to List</a>
</div>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
}

<script>

	document.addEventListener('DOMContentLoaded', function () {
		const inputField = document.getElementById('input-field');
		const inputBlocks = document.getElementById('input-blocks');

		inputField.addEventListener('keydown', function (event) {
			if (event.key === ' ') {
				event.preventDefault();
				createBlock(inputField.value.trim());
				inputField.value = '';
			} else if (event.key === 'Backspace' && inputField.value === '') {
				removeLastBlock();
			}
		});

		function createBlock(text) {
			if (text === '') return;

			const block = document.createElement('div');
			block.className = 'input-block';

			const span = document.createElement('span');
			span.textContent = text;
			block.appendChild(span);

			const removeButton = document.createElement('button');
			removeButton.className = 'remove-block';
			removeButton.textContent = '×';
			removeButton.addEventListener('click', function () {
				inputBlocks.removeChild(block);
			});
			block.appendChild(removeButton);

			inputBlocks.appendChild(block); 
		}

		function removeLastBlock() {
			const lastBlock = inputBlocks.querySelector('.input-block:last-child');
			if (lastBlock) {
				inputBlocks.removeChild(lastBlock);
			}
		}
	});



</script>