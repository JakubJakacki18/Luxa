<div>
	<div class="card">
		<div class="card-header">
			<h5 class="card-title" id="itemHead">Wyszukaj: </h5>
		</div>
		<div class="card-body">
			<blockquote class="blockquote mb-0">
				<div>
					<input type="hidden" value="@ViewBag.Tag" id="tag">
					<label for="categoryFilter">Tag:</label>
					<input class="form-control me-2" type="search" placeholder="Wyszukaj tag" aria-label="Search" id="searchTag">
					<label for="category">Kategoria:</label>
					@Html.DropDownList("category", (IEnumerable<SelectListItem>)ViewBag.SelectItemListCategory, new { @class = "form-select form-select-lg mb-3", @id = "category" })
					<label for="orderBy">Sortuj według:</label>
					@Html.DropDownList("orderBy", (IEnumerable<SelectListItem>)ViewBag.SelectItemListOrderBy, new { @class = "form-select form-select-lg mb-3", @id = "orderBy" })
					<label for="stateFilter">Kierunek sortowania: </label>
					<select class="form-select form-select-lg mb-3" id="orderDirection">
						<option value="DSC">Malejąco</option>
						<option value="ASC">Rosnąco</option>
					</select>
					<button class="btn btn-primary" onclick="changeData()">Filtruj</button>
				</div>
			</blockquote>
		</div>
	</div>
	<div class="newBox">
		<div id="photo-galery" class="photo-galery">
		</div>
	</div>

</div>

<script>
	let pageNumber = 1;
	const pageSize = 30;
	const maxQuantityOfColumns = 6;
	//Przy 1920px to 6 kolumn
	const pixelsPerColumn = 300;
	let isLoadingPhotos = false;
	const path = '/assets/';
	const likePath = path + 'likeButton.png';
	const unlikePath = path + 'unlikeButton.png';
	let category = "";
	let orderAsc = false;
	let sortBy = "date";
	var tag = "";
	let isNotAllPhotos = true;

	function getWindowWidth() {
		var windowWidth = document.documentElement.clientWidth;
		console.log('Szerokość okna:', windowWidth);
		return windowWidth;
	}
	function generateColumns(windowWidth) {
		const galery = document.querySelector('.photo-galery');
		var quantity = Math.floor(windowWidth / 300);
		if (quantity === 0)
			quantity = 1;
		if (quantity > maxQuantityOfColumns)
			quantity = maxQuantityOfColumns;
		for (let i = 0; i < quantity; i++) {
			const columnDiv = document.createElement('div');
			columnDiv.classList.add('column');
			columnDiv.innerHTML = '<div class=columnHeight></div>';
			galery.appendChild(columnDiv)
		}
	}

	async function loadPhotos() {

		console.log(tag);
		console.log(pageNumber + " " + pageSize + " " + tag + " " + category + " " + orderAsc + " " + sortBy);
		const response = await fetch(`/Home/LoadPhotosForDiscover?pageNumber=${pageNumber}&pageSize=${pageSize}&tag=${tag}&category=${category}&orderAsc=${orderAsc}&sortBy=${sortBy}`);

		if (response.status === 401) {
			alert("Nie jesteś zalogowany. Zaloguj się");
			window.location.href = '/SignIn';
			return false;
		}


		const photos = await response.json();
		console.log(photos);
		if (photos.length > 0) {
			addPhotosToColumns(photos);
			pageNumber++;
			return true;
		}
		else {
			const newBox = document.querySelector('.newBox');
			const info = document.createElement('div');
			info.classList.add('photos-info');
			info.id ='photos-info';
			info.innerHTML = '<div class="alert alert-primary" role="alert">Nie ma więcej zdjęć do wyświetlenia</div>';
			newBox.appendChild(info);
			return false;
		}
	}


	function likeOrUnlikePhoto(id) {
		$.ajax({
			url: '/Photos/LikeOrUnlikePhoto/',
			type: 'POST',
			data: { idPhoto: id },
			success: function (response) {
				changeLikeButton(id);
				console.log(response);
				if (true === response) {

				}
			},
			error: function (xhr, status, error) {
				console.log(xhr);
				console.log(status);
				console.log('nie działa: ' + error);
			}
		});
	}

	function getShortestColumn(columns) {
		let shortestColumn = columns[0];
		for (let i = 1; i < columns.length; i++) {
			const currentColumnHeight = columns[i].clientHeight;
			const shortestColumnHeight = shortestColumn.clientHeight;
			if (currentColumnHeight < shortestColumnHeight) {
				shortestColumn = columns[i];
			}
		}
		return shortestColumn;
	}
	function changeLikeButton(id) {
		const url = window.location.origin;
		console.log(url + " " + img + " " + like);
		var img = document.getElementById('photo.' + id);
		var like = document.getElementById('likes.' + id);
		let currentValue = parseInt(like.textContent);
		console.log(like);
		var src = img.src;
		console.log('img.src: ' + img.src + ' likePath: ' + likePath);
		console.log('ścieżka: ' + url + unlikePath);
		if (img.src === url + unlikePath) {
			img.src = url + likePath;
			console.log('niby prawda że unlike jest');
			currentValue++;
		}
		else {
			img.src = url + unlikePath;
			console.log('niby prawda że like jest');
			currentValue--;
		}
		like.textContent = currentValue;

	}
	function addPhotosToColumns(photos) {
		const columns = document.querySelectorAll('.columnHeight');
		photos.forEach((photo, index) => {
			console.log(photo);
			console.log("len:" + columns.length);
			console.log("/Image/" + photo.photo.name);
			const column = getShortestColumn(columns);
			const photoDiv = document.createElement('div');
			//trzeba pobrać wartość z modelu
			const isLiked = photo.isLiked
			console.log("isLiked" + isLiked);
			if (isLiked) {
				var likeString = likePath;
			}
			else {
				var likeString = unlikePath;
			}

			photoDiv.classList.add('photo', 'trigger');
			photoDiv.innerHTML = `
		<a type="button" href="Photos/Details/${photo.photo.id}">
				<img src="/Image/${photo.photo.name}" alt="${photo.photo.name}">
		</a>
		<div class="target">
			<div class="like">
				<a onclick="likeOrUnlikePhoto(${photo.photo.id})" type="button">
					<img id="photo.${photo.photo.id}" src="${likeString}">
				</a>
			</div>
			<div class="like-text" id="likes.${photo.photo.id}">${photo.photo.likeCount}</div>
			<div class="user">
				${photo.ownerName}
			</div>
		</div>`;
			column.appendChild(photoDiv);
		});
		addTrigger();
	}

	window.addEventListener('scroll', () => {

		if (!isLoadingPhotos && isNotAllPhotos && (window.innerHeight + window.scrollY) >= document.body.offsetHeight) {
			console.log("Scroll zadziałał");
			isLoadingPhotos = true;
			loadPhotos().then((result) => {
				isNotAllPhotos = result;
				isLoadingPhotos = false;
			});
		}

	});

	async function initPhotos() {
		generateColumns(getWindowWidth());
		isLoadingPhotos = true;
		while (isLoadingPhotos && isNotAllPhotos && (window.innerHeight >= document.body.offsetHeight)) {
			console.log("pętla: " + isLoadingPhotos);
			if (!(await loadPhotos()))
			{
				isNotAllPhotos = false;
				break;
			}
		}
		isLoadingPhotos = false;

	}

	window.addEventListener('DOMContentLoaded', async function () {
		tag = document.getElementById('tag').value;
		await initPhotos();

	});

	function addTrigger() {
		const triggers = document.querySelectorAll('.photo.trigger');
		triggers.forEach(trigger => {
			const target = trigger.querySelector('.target');

			trigger.addEventListener('mouseenter', function () {
				target.style.opacity = '1';
				console.log("zmiana na 1");
			});

			trigger.addEventListener('mouseleave', function () {
				target.style.opacity = '0';
				console.log("zmiana na 0");
			});
		});
	};
	function getOrder() {
		const orderDirection = document.getElementById("orderDirection").value;
		console.log(orderDirection);
		if (orderDirection === "ASC") {
			return true;
		}
		else {
			return false;
		}
	};

	async function changeData() {
		const photoGalery = document.getElementById("photo-galery");
		photoGalery.innerHTML = '';
		pageNumber = 1;
		tag = document.getElementById("searchTag").value;
		category = document.getElementById("category").value;
		orderAsc = getOrder();
		sortBy = document.getElementById("orderBy").value;
		isNotAllPhotos = true;
		const info = document.getElementById("photos-info");
		if (info) {
			info.remove();
		}
		await initPhotos();

	};
</script>

